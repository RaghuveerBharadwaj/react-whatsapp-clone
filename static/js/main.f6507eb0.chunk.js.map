{"version":3,"sources":["chat/Chat.jsx","register/Register.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Chat","messages","setMessages","userData","JSON","parse","localStorage","getItem","useState","input","setInput","useEffect","setTimeout","divElement","document","getElementById","scrollTo","top","scrollHeight","behavior","axios","get","process","then","res","data","catch","err","console","error","className","id","map","mess","userId","xmlns","viewBox","width","height","opacity","fill","d","sent","name","message","timeStamp","_id","rows","placeholder","onChange","e","target","value","onKeyUp","keyCode","which","post","Date","toLocaleString","Register","userName","setUserName","autoFocus","key","user","uniqid","setItem","stringify","window","location","reload","App","setUser","channel","Pusher","cluster","subscribe","bind","dataInserted","unbind","msgs","_","cloneDeep","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f6507eb0.chunk.js","sourcesContent":["import './Chat.scss'\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nconst Chat = ({ messages, setMessages }) => {\n  const userData = JSON.parse(localStorage.getItem(\"userData\"))\n  const [input, setInput] = useState(\"\")\n\n  useEffect(() => {\n    setTimeout(() => {\n      const divElement = document.getElementById(\"chat_body\")\n      divElement.scrollTo({\n        top: divElement.scrollHeight,\n        behavior: 'smooth'\n      })\n    }, 300)\n\n    axios\n      .get(`${process.env.REACT_APP_BASE_URL}/messages/sync`)\n      .then(res => setMessages(res.data))\n      .catch(err => console.error(err))\n\n  }, [])\n\n  const onEnterClick = (e) => {\n    const key = e.keyCode || e.which\n\n    if (key === 13) {\n      axios\n        .post(`${process.env.REACT_APP_BASE_URL}/messages/new`, {\n          ...userData,\n          timeStamp: new Date().toLocaleString(),\n          message: input\n        })\n        .catch(err => console.error(err))\n      setInput(\"\")\n    }\n  }\n\n  return (\n    <div className=\"chat\">\n      <div className=\"header\">\n        Raghuveer's Chat Room\n      </div>\n      <div className=\"chat_body\" id=\"chat_body\">\n        {messages.map(mess => (\n          <div key={mess._id} className={`message_body ${userData?.userId === mess.userId && 'sent'}`}>\n            <svg className=\"arrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8 13\" width=\"8\" height=\"13\"><path opacity=\".13\" fill=\"#0000000\" d=\"M1.533 3.568L8 12.193V1H2.812C1.042 1 .474 2.156 1.533 3.568z\"></path><path fill=\"currentColor\" d=\"M1.533 2.568L8 11.193V0H2.812C1.042 0 .474 1.156 1.533 2.568z\"></path></svg>\n            {!mess.sent && <small className=\"sender\">\n              {mess.name}\n            </small>}\n            <p className=\"message\">\n              {mess.message}\n            </p>\n            <p className=\"timestamp\">\n              {mess.timeStamp}\n            </p>\n          </div>\n        ))}\n      </div>\n      <div className=\"footer\">\n        <textarea\n          rows={1}\n          placeholder=\"Enter your message here\"\n          onChange={(e) => setInput(e.target.value)}\n          value={input}\n          onKeyUp={onEnterClick}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Chat\n","import { useState } from 'react'\nimport uniqid from 'uniqid'\nimport './Register.scss'\n\nconst Register = () => {\n\n  const [userName, setUserName] = useState(\"\")\n\n  const onEnterClick = (e) => {\n    const key = e.keyCode || e.which\n\n    if (!userName) return\n\n    if (key === 13) {\n      const user = {\n        name: userName,\n        userId: uniqid()\n      }\n      localStorage.setItem(\"userData\", JSON.stringify(user))\n      window.location.reload()\n    }\n  }\n\n  return (\n    <div className=\"register\">\n      <p>\n        Welcome to the Chat Room! <br />\n        <small>Enter your Pen Name and press enter!!</small>\n      </p>\n      <input\n        autoFocus\n        name=\"register\"\n        onChange={(e) => setUserName(e.target.value)}\n        value={userName}\n        onKeyUp={onEnterClick}\n      />\n    </div>\n  )\n}\n\nexport default Register\n","import { useEffect, useState } from 'react'\nimport _ from 'lodash'\nimport Pusher from 'pusher-js'\nimport './App.css'\nimport Chat from './chat/Chat'\nimport Register from './register/Register'\n\nfunction App() {\n\n  const [user, setUser] = useState({})\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    const userData = localStorage.getItem(\"userData\")\n    if (!userData) {\n      localStorage.setItem(\"userData\", JSON.stringify(user))\n    } else {\n      setUser(JSON.parse(userData))\n    }\n\n    const pusher = new Pusher(process.env.REACT_APP_PUSHER, {\n      cluster: 'ap2'\n    })\n\n    const channel = pusher.subscribe('messages')\n    channel.bind('inserted', dataInserted)\n    return () => {\n      channel.unbind()\n    }\n  }, [])\n\n  const dataInserted = (data) => {\n    setMessages(msgs => _.cloneDeep([..._.cloneDeep(msgs), data]))\n    const divElement = document.getElementById(\"chat_body\")\n    if (divElement) {\n      divElement.scrollTo({\n        top: divElement.scrollHeight,\n        behavior: 'smooth'\n      })\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      {user?.userId ? <Chat \n        messages={messages}\n        setMessages={setMessages}\n      /> : <Register />}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}